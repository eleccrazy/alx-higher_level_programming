====================================================================
                                                                   =
Generating Test Cases for ``101-lazy_matrix_mul`` module.          =
                                                                   =
====================================================================

====================================================================
                                                                   =
File: 101-lazy_matrix_mul.txt                                      =
Desc: This file contains most possible edge cases for the function =
      ``lazy_matrix_mul`` in the `` 101-lazy_matrix_mul`` module   =
Author: Gizachew Bayness (Elec Crazy)                              =
Date Created: Jul 24 2022                                          =
                                                                   =
====================================================================

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Let's first test the function with all valid arguments for both
float and integer types over +ve and -ve cases.

>>> m_a = [
...	[1, 2],
...	[3, 4],
...	]
>>> m_b = [
...	[5, 6],
...	[7, 8],
...	]
>>> print(lazy_matrix_mul(m_a, m_b))
[[19 22]
 [43 50]]

>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[ 7 10]
 [15 22]]

>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13 16]]

>>> m_a = [
...     [1.6, -2, 88],
...     [-9, 5.07, -3.1]
...     ]
>>> m_b = [
...     [5.098, 6, -8.7],
...     [-7, -0.98, 7.6],
...	[-1, -2, 3.3]
...     ]
>>> print(lazy_matrix_mul(m_a, m_b))
[[ -65.8432 -164.44    261.28  ]
 [ -78.272   -52.7686  106.602 ]]

>>> print(lazy_matrix_mul([[-4.4]], [[1, 2, 3, 4, 5]]))
[[ -4.4  -8.8 -13.2 -17.6 -22. ]]

>>> print(lazy_matrix_mul([[3]], [[7]]))
[[21]]

>>> m_a = [
...     [-1, -2],
...     [-3, -4]
...     ]
>>> m_b = [
...     [5, 6],
...     [7, 8]
...     ]
>>> print(lazy_matrix_mul(m_a, m_b))
[[-19 -22]
 [-43 -50]]

>>> m_a = [
...     [-1, -2],
...     [3, 4]
...     ]
>>> m_b = [
...     [5, -6],
...     [-7, 8]
...     ]
>>> print(lazy_matrix_mul(m_a, m_b))
[[  9 -10]
 [-13  14]]

Let's test the function by passing non-list arguments, invalid list elements,
empty lists and unmatched matrix sizes.

>>> print(lazy_matrix_mul("Elec", [[1, 2]]))
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

>>> print(lazy_matrix_mul([[1, 2]], None))
Traceback (most recent call last):
...
TypeError: Object arrays are not currently supported

>>> print(lazy_matrix_mul([[1, 2]], {"Name" : "Elec", "Passion": "SE"}))
Traceback (most recent call last):
...
TypeError: Object arrays are not currently supported

>>> print(lazy_matrix_mul(1, 11))
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

>>> print(lazy_matrix_mul([], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], []))
Traceback (most recent call last):
...
ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

>>> print(lazy_matrix_mul([], []))
0.0

>>> print(lazy_matrix_mul([[]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[]]))
Traceback (most recent call last):
...
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

>>> print(lazy_matrix_mul([[]], [[]]))
Traceback (most recent call last):
...
ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0)

>>> print(lazy_matrix_mul([[]], []))
[0.]

>>> print(lazy_matrix_mul([[1, "Crazy"], [2, 3]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
TypeError: invalid data type for einsum

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[None, "he"], [3, 4]]))
Traceback (most recent call last):
...
TypeError: Object arrays are not currently supported

>>> print(lazy_matrix_mul([[None]], [[None]]))
Traceback (most recent call last):
...
TypeError: Object arrays are not currently supported

>>> m_a = [
...     [1, 2],
...     [3, 4, 6]
...     ]
>>> m_b = [
...     [5, 6],
...     [7, 8]
...     ]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

>>> print(lazy_matrix_mul(m_b, m_a))
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

>>> m_b = [
...     [5],
...     [7, 8]
...     ]

>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

>>> m_a = [
...     [1, 2],
...     [3, 4],
...	[5, 6]
...     ]
>>> m_b = [
...     [5, 6],
...     [7, 8]
...     ]

>>> print(lazy_matrix_mul(m_b, m_a))
Traceback (most recent call last):
...
ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

>>> print(lazy_matrix_mul(m_a, m_b))
[[19 22]
 [43 50]
 [67 78]]

Let's test the function by supplying insufficient arguments to it.
If insufficient argument is passed to it, it will raise a default
TypeError for missing positional argument is raised.

>>> print(lazy_matrix_mul(m_a))
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul()
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
